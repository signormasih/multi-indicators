//@version=5
indicator("Multi indicator",overlay = true)
//3 Moving avarage
//UT BOT
//NSDT HAMA
//SUPRT Zone
import TradingView/ta/7

//moving avarage
s1 = input.int(12, "MA 1")
s2 = input.int(24, "MA 2")
s3 = input.int(50, "MA 3")

signal = ta.sma(close, s1)
signal2 = ta.sma(close, s2)
signal3 = ta.sma(close, s3)
plot(signal, color = color.rgb(253, 255, 135))
plot(signal2, color = color.rgb(2, 225, 255))
plot(signal3, color = color.rgb(41, 17, 255))

//supertrend Zone
multi = input.float(2.00, "Supertrend Factor")
lenght = input.int(100, "ATR lenght")
width = input.float(1.00, "Zone width")
alert = input.string("Buy and Sell zone", "Alert", ["Buy and Sell zone", "Buy and Sell zone with large trend", "Only buy zone", "Only sell zone", "Trend change", "Trend change in confluence with long trend"])

atrs = ta.atr(lenght) * width
[supertrend, direction] = ta.supertrend(multi, lenght)
supertrendzoneup = if direction < 0
    supertrend + atrs
supertrendzonedown = if direction > 0
    supertrend - atrs
[supertrend2, direction2] = ta.supertrend(multi*3, lenght*3)

p1 = plot(direction < 0 and direction[1] < 0 ? supertrend : direction > 0 and direction[1] > 0 ? supertrend : na, "External SuperTrend", color = direction > 0 ? color.new(#e91e63, 0) : color.new(#2962ff, 0), style=plot.style_linebr)
p3 = plot(direction < 0 and direction[1] < 0 ? supertrendzoneup : direction > 0 and direction[1] > 0 ? supertrendzonedown : na, title = "Internal SuperTrend", color = direction > 0 ? color.new(#e91e63, 30) : color.new(#2962ff, 30), style=plot.style_linebr)
fill(p1, p3, color = direction < 0 ? color.new(#2962ff, 80) : color.new(#e91e63, 80))

plot(direction2 < 0 and direction2[1] < 0 ? supertrend2 : direction2 > 0 and direction2[1] > 0 ? supertrend2 : na, "Long Term Supertrend", color = direction2 < 0 ? color.new(#ffffff, 0) : color.new(#ff9900, 0), style=plot.style_linebr)

alertb = close < supertrendzoneup and close > supertrend and direction < 0
alerts = close > supertrendzoneup and close < supertrend and direction > 0
alertbl = close < supertrendzoneup and close > supertrend and direction < 0 and close > supertrend2
alertsl = close > supertrendzoneup and close < supertrend and direction > 0 and close < supertrend2

tchup = direction < 0 and direction[3] > 0
tchdown = direction > 0 and direction[3] < 0
tchup2 = tchup and direction2 < 0
tchdown2 = tchdown and direction2 > 0

chosen = switch alert
    "Buy and Sell zone" => alertb or alerts
    "Buy and Sell zone with large trend" => alertbl or alertsl
    "Only buy zone" => alertb
    "Only sell zone" => alerts
    "Trend change" => tchup or tchdown
    "Trend change in confluence with long trend" => tchup2 or tchdown2

alertcondition(chosen, "SuperTrend Alert", "The price of {{ticker}} is in the area of SuperTrend")

//NSDT HAMA
f_c_gradientAdvDecPro(_source, _center, _steps, _c_bearWeak, _c_bearStrong, _c_bullWeak, _c_bullStrong) =>
    var float _qtyAdvDec = 0.
    var float _maxSteps = math.max(1, _steps)
    bool _xUp = ta.crossover(_source, _center)
    bool _xDn = ta.crossunder(_source, _center)
    float _chg = ta.change(_source)
    bool _up = _chg > 0
    bool _dn = _chg < 0
    bool _srcBull = _source > _center
    bool _srcBear = _source < _center
    _qtyAdvDec := _srcBull ? _xUp ? 1 : _up ? math.min(_maxSteps, _qtyAdvDec + 1) : _dn ? math.max(1, _qtyAdvDec - 1) : _qtyAdvDec : _srcBear ? _xDn ? 1 : _dn ? math.min(_maxSteps, _qtyAdvDec + 1) : _up ? math.max(1, _qtyAdvDec - 1) : _qtyAdvDec : _qtyAdvDec
    var color _return = na
    _return := _srcBull ? color.from_gradient(_qtyAdvDec, 1, _maxSteps, _c_bullWeak, _c_bullStrong) : _srcBear ? color.from_gradient(_qtyAdvDec, 1, _maxSteps, _c_bearWeak, _c_bearStrong) : _return
    _return

//MA TYPES
mat(source, length, type) =>
    type == 'SMA' ? ta.sma(source, length) : type == 'EMA' ? ta.ema(source, length) : type == 'RMA' ? ta.rma(source, length) : type == 'WMA' ? ta.wma(source, length) : type == 'VWMA' ? ta.vwma(source, length) : type == 'HMA' ? ta.hma(source, length) : type == 'TMA' ? ta.sma(ta.sma(source, length), length) : na

//INPUTS
bull = input(color.rgb(0, 255, 0), title='Bull Color')
bear = input(color.rgb(255, 0, 0), title='Bear Color')
neutral = input(color.rgb(255, 255, 0, 0), title='Neutral Color')
show_ma = true
ma_type = 'WMA'
ma_source = close
ma_length = 55
UseGradient = input(true, title='Use Gradient Colors')
stepn = input(5, title='Max Gradient Steps')
ma = mat(ma_source, ma_length, ma_type)
col = f_c_gradientAdvDecPro(ma, ta.ema(ma, 3), stepn, neutral, bear, neutral, bull)
////////////////////
//END GRADIENT AREA
////////////////////

//MA INFO
WickColor = input.color(color.rgb(80, 80, 80, 100), title='Wick Color', tooltip='Suggest Full Transparency.')
OpenLength = input.int(30, minval=1, title='Length Open', inline='Open')
OpenType = input.string(defval='EMA', title='Type', options=['EMA', 'SMA', 'WMA'], inline='Open')
HighLength = 20
HighType = 'EMA'
LowLength = 20
LowType = 'EMA'
CloseLength = input.int(25, minval=1, title='Length Close', inline='Close')
CloseType = input.string(defval='EMA', title='Type', options=['EMA', 'SMA', 'WMA'], inline='Close')
LengthMA = input.int(100, minval=1, title='MA Line Length', inline='MA Info')
MAType = input.string(defval='EMA', title='MA Line Type', options=['EMA', 'SMA', 'WMA'], inline='MA Info')
MASource = input(hl2, title='MA Source')

TypeOpen = OpenType
SourceOpen = (open[1] + close[1]) / 2
LengthOpen = OpenLength

TypeHigh = HighType
SourceHigh = math.max(high, close)
LengthHigh = HighLength

TypeLow = LowType
SourceLow = math.min(low, close)
LengthLow = LowLength

TypeClose = CloseType
SourceClose = (open + high + low + close) / 4
LengthClose = CloseLength

funcCalcMA1(type1, src1, len1) =>
    return_1 = type1 == 'EMA' ? ta.ema(src1, len1) : type1 == 'SMA' ? ta.sma(src1, len1) : type1 == 'WMA' ? ta.wma(src1, len1) : na
    return_1
funcCalcOpen(TypeOpen, SourceOpen, LengthOpen) =>
    return_2 = TypeOpen == 'EMA' ? ta.ema(SourceOpen, LengthOpen) : TypeOpen == 'SMA' ? ta.sma(SourceOpen, LengthOpen) : TypeOpen == 'WMA' ? ta.wma(SourceOpen, LengthOpen) : na
    return_2
funcCalcHigh(TypeHigh, SourceHigh, LengthHigh) =>
    return_3 = TypeHigh == 'EMA' ? ta.ema(SourceHigh, LengthHigh) : TypeHigh == 'SMA' ? ta.sma(SourceHigh, LengthHigh) : TypeHigh == 'WMA' ? ta.wma(SourceHigh, LengthHigh) : na
    return_3
funcCalcLow(TypeLow, SourceLow, LengthLow) =>
    return_4 = TypeLow == 'EMA' ? ta.ema(SourceLow, LengthLow) : TypeLow == 'SMA' ? ta.sma(SourceLow, LengthLow) : TypeLow == 'WMA' ? ta.wma(SourceLow, LengthLow) : na
    return_4
funcCalcClose(TypeClose, SourceClose, LengthClose) =>
    return_5 = TypeClose == 'EMA' ? ta.ema(SourceClose, LengthClose) : TypeClose == 'SMA' ? ta.sma(SourceClose, LengthClose) : TypeClose == 'WMA' ? ta.wma(SourceClose, LengthClose) : na
    return_5

MA1 = funcCalcMA1(MAType, MASource, LengthMA)

CandleOpen = funcCalcOpen(TypeOpen, SourceOpen, LengthOpen)
CandleHigh = funcCalcHigh(TypeHigh, SourceHigh, LengthHigh)
CandleLow = funcCalcLow(TypeLow, SourceLow, LengthLow)
CandleClose = funcCalcClose(TypeClose, SourceClose, LengthClose)

//PLOT CANDLES
BodyColor = CandleOpen > CandleOpen[1] ? color.green : color.red
// barcolor(UseGradient ? col : BodyColor)
plotcandle(CandleOpen, CandleHigh, CandleLow, CandleClose, color=UseGradient ? col : BodyColor, title='HAMA Candles', wickcolor=WickColor, bordercolor=na)
plot(MA1, title='MA Line', color=UseGradient ? col : BodyColor, style=plot.style_line, linewidth=2)

//ALERTS
alertcondition(ta.rising(MA1, 2), title='MA Rising', message='MA Rising')
alertcondition(ta.falling(MA1, 2), title='MA Falling', message='MA Falling')
alertcondition(ta.crossover(high, MA1), title='High Crossing MA', message='High Crossing MA')
alertcondition(ta.crossunder(low, MA1), title='Low Crossing MA', message='Low Crossing MA')

// UT BOT

//@version=5

src = close

keyvalue = input.float(2, title='Key Vaule. \'This changes the sensitivity\'', step=.5)
atrperiod = input(10, title='ATR Period')
xATR = ta.atr(atrperiod)
nLoss = keyvalue * xATR

xATRTrailingStop = 0.0
iff_1 = src > nz(xATRTrailingStop[1], 0) ? src - nLoss : src + nLoss
iff_2 = src < nz(xATRTrailingStop[1], 0) and src[1] < nz(xATRTrailingStop[1], 0) ? math.min(nz(xATRTrailingStop[1]), src + nLoss) : iff_1
xATRTrailingStop := src > nz(xATRTrailingStop[1], 0) and src[1] > nz(xATRTrailingStop[1], 0) ? math.max(nz(xATRTrailingStop[1]), src - nLoss) : iff_2

pos = 0
iff_3 = src[1] > nz(xATRTrailingStop[1], 0) and src < nz(xATRTrailingStop[1], 0) ? -1 : nz(pos[1], 0)
pos := src[1] < nz(xATRTrailingStop[1], 0) and src > nz(xATRTrailingStop[1], 0) ? 1 : iff_3

xcolor = pos == -1 ? color.red : pos == 1 ? color.green : color.blue

//plot(xATRTrailingStop, color=xcolor, title='Trailing Stop')
buy = ta.crossover(src, xATRTrailingStop)
sell = ta.crossunder(src, xATRTrailingStop)
barcolor = src > xATRTrailingStop

plotshape(buy, title='Bull', style=shape.labelup, location=location.belowbar, color=color.new(color.green, 0), textcolor=color.new(color.white, 0), size=size.normal)
plotshape(sell, title='Bear', style=shape.labeldown, color=color.new(color.red, 0), textcolor=color.new(color.white, 0), size=size.normal)

alertcondition(buy, title='UT BOT Buy', message='UT BOT Buy')
alertcondition(sell, title='UT BOT Sell', message='UT BOT Sell')
